package algorithm4_HashSet;

import java.util.*;
import java.util.Map.Entry;

public class exam5_Tree_set {
//	5. K번째 큰 수
//	설명
//
//	현수는 1부터 100사이의 자연수가 적힌 N장의 카드를 가지고 있습니다. 같은 숫자의 카드가 여러장 있을 수 있습니다.
//
//	현수는 이 중 3장을 뽑아 각 카드에 적힌 수를 합한 값을 기록하려고 합니다. 3장을 뽑을 수 있는 모든 경우를 기록합니다.
//
//	기록한 값 중 K번째로 큰 수를 출력하는 프로그램을 작성하세요.
//
//	만약 큰 수부터 만들어진 수가 25 25 23 23 22 20 19......이고 K값이 3이라면 K번째 큰 값은 22입니다.
//
//
//	입력
//	첫 줄에 자연수 N(3<=N<=100)과 K(1<=K<=50) 입력되고, 그 다음 줄에 N개의 카드값이 입력된다.
//
//
//	출력
//	첫 줄에 K번째 수를 출력합니다. K번째 수가 존재하지 않으면 -1를 출력합니다.
//
//
//	예시 입력 1 
//
//	10 3
//	13 15 34 23 45 65 33 11 26 42
//	예시 출력 1
//
//	143
	
	//n 장에서 32
	public static void main(String[] args) {

		exam5_Tree_set exam1 = new exam5_Tree_set(); 
		Scanner in = new Scanner(System.in);
		
		int n = in.nextInt();
		int[]arr = new int[n];
		int k = in.nextInt();
		
		for(int i = 0; i < n; i++) {
			arr[i] = in.nextInt();
		}
		
		System.out.print(exam1.solution(n, arr , k));
	}
	public int solution(int n, int[] arr,int k) {
		
		int answer = 0;
		TreeSet<Integer>tr = new TreeSet<Integer>();
		
		ArrayList<Integer>SumArr = new ArrayList<>();
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < n; j++) {
				for(int l = 0; l < n; l++) {
					SumArr.add(arr[i] + arr[j] + arr[l]);
				}
			}
		}
		
		for(int x : SumArr) {
			tr.add(x);
			//System.out.println(x);
		}
			
		//트리셋 순회 하면서 그 차수가 전체 길이 - k 일떄 시점의 값을 빼서 answer로 반환 해주면 된다. 
			
		
		
		for(int x : tr) {
			
			//System.out.print(x + " ");
		}
		//Iterator it = tr.iterator();
		int count = 1;
		
		//System.out.print(":::::::::::::::::it::::::::::::::::");
		//while(it.hasNext()) {
			if(count == n  - k) answer = x;
			count ++;
		//}
		//System.out.println("treeset" + tr);
		return answer;
	}
		
		
}
